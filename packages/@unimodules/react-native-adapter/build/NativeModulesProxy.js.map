{"version":3,"file":"NativeModulesProxy.js","sourceRoot":"","sources":["../src/NativeModulesProxy.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport { CodedError } from './errors/CodedError';\nimport { UnavailabilityError } from './errors/UnavailabilityError';\n\nconst NativeProxy = NativeModules.NativeUnimoduleProxy;\nconst modulesConstantsKey = 'modulesConstants';\nconst exportedMethodsKey = 'exportedMethods';\n\nexport type ProxyNativeModule = {\n  [propertyName: string]: any;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\nconst NativeModulesProxy: { [moduleName: string]: ProxyNativeModule } = {};\n\nif (!NativeProxy) {\n  console.warn(\n    `The \"UMNativeModulesProxy\" native module is not exported through NativeModules; verify that @unimodules/react-native-adapter's native code is linked properly`\n  );\n}\n\nfunction createModuleProxy(moduleName) {\n  const moduleProxy = NativeProxy[modulesConstantsKey][moduleName] || {};\n  NativeProxy[exportedMethodsKey][moduleName].forEach(methodInfo => {\n    moduleProxy[methodInfo.name] = async (...args: unknown[]): Promise<any> => {\n      const { key, argumentsCount } = methodInfo;\n      if (argumentsCount !== args.length) {\n        throw new Error(\n          `Native method ${moduleName}.${methodInfo.name} expects ${argumentsCount} ${\n            argumentsCount === 1 ? 'argument' : 'arguments'\n          } but received ${args.length}`\n        );\n      }\n      return await NativeProxy.callMethod(moduleName, key, args);\n    };\n  });\n\n  // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)\n  // only on iOS and they use iOS-specific native module, EXReactNativeEventEmitter.\n  //\n  // On Android only {start,stop}Observing are called on the native module\n  // and these should be exported as Expo methods.\n  moduleProxy.addListener = (...args) =>\n    NativeModules.UMReactNativeEventEmitter.addProxiedListener(moduleName, ...args);\n  moduleProxy.removeListeners = (...args) =>\n    NativeModules.UMReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);\n\n  return new Proxy(moduleProxy, {\n    get: (target, propName, receiver) => {\n      if (propName in target || propName === '$$typeof') {\n        return Reflect.get(target, propName, receiver);\n      }\n      throw new UnavailabilityError(moduleName, String(propName));\n    },\n  });\n}\n\nexport default new Proxy(NativeModulesProxy, {\n  get: (target, propName, receiver) => {\n    if (propName in target || propName === '$$typeof') {\n      return Reflect.get(target, propName, receiver);\n    }\n\n    const moduleName = String(propName);\n    if (NativeProxy[exportedMethodsKey][moduleName]) {\n      const moduleProxy = createModuleProxy(String(propName));\n      target[String(propName)] = moduleProxy;\n      return moduleProxy;\n    }\n\n    throw new CodedError(\n      'ERR_UNVAILABLE',\n      `Native module ${String(propName)} is not available on ${\n        Platform.OS\n      }, are you sure you've linked all the native dependencies properly?`\n    );\n  },\n});\n"]}